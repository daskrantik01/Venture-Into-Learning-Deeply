{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"200acbec9e5e4007ad66694457b59199":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_437fc4908b6a43439caed6229242b78a","IPY_MODEL_e6dd976924ac4d0285802bf1c94317dc","IPY_MODEL_fbd4c2b3331e4aa18a06802993f29cd3"],"layout":"IPY_MODEL_52594215d6e6456db2d334cd81070868"}},"437fc4908b6a43439caed6229242b78a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7eca2f2a4ca94549980359c14646dc62","placeholder":"​","style":"IPY_MODEL_3f2e0371bfab48f386d053389e5f7e1c","value":"Downloading (…)okenizer_config.json: 100%"}},"e6dd976924ac4d0285802bf1c94317dc":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_238ea7e0151348868f222ca1f230f416","max":28,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a6e0e1ff8d5744ed840eccd410f09c5b","value":28}},"fbd4c2b3331e4aa18a06802993f29cd3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_371891b2492147e492a8e7f6dbadbe95","placeholder":"​","style":"IPY_MODEL_4240553a119344ae9fff494345164e98","value":" 28.0/28.0 [00:00&lt;00:00, 516B/s]"}},"52594215d6e6456db2d334cd81070868":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7eca2f2a4ca94549980359c14646dc62":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3f2e0371bfab48f386d053389e5f7e1c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"238ea7e0151348868f222ca1f230f416":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a6e0e1ff8d5744ed840eccd410f09c5b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"371891b2492147e492a8e7f6dbadbe95":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4240553a119344ae9fff494345164e98":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5ea998c143434040905b8e69672a45b8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5c0a1b3f8e244cdf8099d97bba66b229","IPY_MODEL_63937e6362714b4a9133c62f4a97d15a","IPY_MODEL_3af6014312de42f699715a77c6a2aa67"],"layout":"IPY_MODEL_982a5bdf828f42628c107c46b18dbc15"}},"5c0a1b3f8e244cdf8099d97bba66b229":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_71b831d18c014c81be9d4bcb7281ea81","placeholder":"​","style":"IPY_MODEL_05cebf4c052f41abb9088d34301e4909","value":"Downloading (…)solve/main/vocab.txt: 100%"}},"63937e6362714b4a9133c62f4a97d15a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6484143eb6664e97ae2bcfb2fa5dcfec","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_be558f5a544945f995f0b4f889212b1e","value":231508}},"3af6014312de42f699715a77c6a2aa67":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a6259e73b1cb42beb852f5f4b456dc73","placeholder":"​","style":"IPY_MODEL_88365230b1104a65a840007be00f9975","value":" 232k/232k [00:00&lt;00:00, 1.47MB/s]"}},"982a5bdf828f42628c107c46b18dbc15":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"71b831d18c014c81be9d4bcb7281ea81":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"05cebf4c052f41abb9088d34301e4909":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6484143eb6664e97ae2bcfb2fa5dcfec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"be558f5a544945f995f0b4f889212b1e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a6259e73b1cb42beb852f5f4b456dc73":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"88365230b1104a65a840007be00f9975":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b570261d73564a1bbe4438f742932dd3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e770f02826d84bba84653f1b5e410bd6","IPY_MODEL_f2f026ab79304940a097bbdd8769e602","IPY_MODEL_1bca37394a1f4affaf51c5d3dab3d4c6"],"layout":"IPY_MODEL_4b2fbe03a2d24950897cc024560ecf00"}},"e770f02826d84bba84653f1b5e410bd6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_728160df986f4f51b930b23dfd36369a","placeholder":"​","style":"IPY_MODEL_4d4a5850f4864b5fb83950797200b062","value":"Downloading (…)/main/tokenizer.json: 100%"}},"f2f026ab79304940a097bbdd8769e602":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_bae55382125942a7a1b106139214a94b","max":466062,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e2ee6a38d57c41bab260ec7fb810c8f3","value":466062}},"1bca37394a1f4affaf51c5d3dab3d4c6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f31fa6ed6c5d45a6b88d30b7724c55db","placeholder":"​","style":"IPY_MODEL_b676950a32764825a052dcf7b1f64824","value":" 466k/466k [00:00&lt;00:00, 3.17MB/s]"}},"4b2fbe03a2d24950897cc024560ecf00":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"728160df986f4f51b930b23dfd36369a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4d4a5850f4864b5fb83950797200b062":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bae55382125942a7a1b106139214a94b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e2ee6a38d57c41bab260ec7fb810c8f3":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f31fa6ed6c5d45a6b88d30b7724c55db":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b676950a32764825a052dcf7b1f64824":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"00daea108c784c7389991d0b3f4fe4ec":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_8bb8145e6755469f85580a9fc4430230","IPY_MODEL_11075cbff7d9412c9b99d9eb11618560","IPY_MODEL_4bab92e675524078bb5c4fa0a1fc7175"],"layout":"IPY_MODEL_821c457abf8c44bab511efa4bd3c6b49"}},"8bb8145e6755469f85580a9fc4430230":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8f90f4574dce426d9b5553d8e67c5f4c","placeholder":"​","style":"IPY_MODEL_be564cc5a59b406a91283c5ab51a79e2","value":"Downloading (…)lve/main/config.json: 100%"}},"11075cbff7d9412c9b99d9eb11618560":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f5b187d9461149cb80908ac5269f0caa","max":570,"min":0,"orientation":"horizontal","style":"IPY_MODEL_7de1bea24f004f28bf39768787f43f12","value":570}},"4bab92e675524078bb5c4fa0a1fc7175":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2a18ab4a3f1f43ffb82e3f100e994978","placeholder":"​","style":"IPY_MODEL_d23629a703de43a3be85419f513f76af","value":" 570/570 [00:00&lt;00:00, 15.1kB/s]"}},"821c457abf8c44bab511efa4bd3c6b49":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8f90f4574dce426d9b5553d8e67c5f4c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"be564cc5a59b406a91283c5ab51a79e2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f5b187d9461149cb80908ac5269f0caa":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7de1bea24f004f28bf39768787f43f12":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2a18ab4a3f1f43ffb82e3f100e994978":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d23629a703de43a3be85419f513f76af":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"064e0ab183d64044b9016d4251308ddd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5d14545339504478832a3e6b29b44309","IPY_MODEL_13f43a11f92841908ec16b05192891be","IPY_MODEL_a8f66bda9a3145c6bfe8776175ac4492"],"layout":"IPY_MODEL_4111170b28d84abfa21fc0aeb1d7ba1c"}},"5d14545339504478832a3e6b29b44309":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_34d7ccb3656245edbe03cadee5bb421e","placeholder":"​","style":"IPY_MODEL_a80d19a7de80412e8049bb8b46365f25","value":"Downloading model.safetensors: 100%"}},"13f43a11f92841908ec16b05192891be":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_3c414cabf2c34484bc2ffc5e5fbdebdd","max":440449768,"min":0,"orientation":"horizontal","style":"IPY_MODEL_fefb4c0cf1a343779ef521ab0375c3c5","value":440449768}},"a8f66bda9a3145c6bfe8776175ac4492":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2a99acc6a6644d278117cc7ce8a522e4","placeholder":"​","style":"IPY_MODEL_0fad9e9af61e4880ac1811561ccd05c2","value":" 440M/440M [00:04&lt;00:00, 126MB/s]"}},"4111170b28d84abfa21fc0aeb1d7ba1c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"34d7ccb3656245edbe03cadee5bb421e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a80d19a7de80412e8049bb8b46365f25":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3c414cabf2c34484bc2ffc5e5fbdebdd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fefb4c0cf1a343779ef521ab0375c3c5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2a99acc6a6644d278117cc7ce8a522e4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0fad9e9af61e4880ac1811561ccd05c2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"RuScPbmZQR9U"},"outputs":[],"source":["]# Import necessary libraries\n","import pandas as pd\n","import torch\n","from sklearn.model_selection import train_test_split\n","from transformers import BertTokenizer, BertForSequenceClassification, AdamW, get_linear_schedule_with_warmup\n","from torch.utils.data import DataLoader, TensorDataset\n","from torch.nn.functional import softmax\n","from sklearn.metrics import classification_report"]},{"cell_type":"code","source":["pip install transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NTihHCWgQTyA","executionInfo":{"status":"ok","timestamp":1696851940288,"user_tz":-330,"elapsed":16029,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"747c8b52-42da-41f3-8531-14d8fa20f619"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting transformers\n","  Downloading transformers-4.34.0-py3-none-any.whl (7.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.7/7.7 MB\u001b[0m \u001b[31m44.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.12.4)\n","Collecting huggingface-hub<1.0,>=0.16.4 (from transformers)\n","  Downloading huggingface_hub-0.17.3-py3-none-any.whl (295 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m295.0/295.0 kB\u001b[0m \u001b[31m26.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.23.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (23.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2023.6.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)\n","Collecting tokenizers<0.15,>=0.14 (from transformers)\n","  Downloading tokenizers-0.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.8/3.8 MB\u001b[0m \u001b[31m81.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting safetensors>=0.3.1 (from transformers)\n","  Downloading safetensors-0.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m63.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.1)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->transformers) (2023.6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->transformers) (4.5.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2023.7.22)\n","Installing collected packages: safetensors, huggingface-hub, tokenizers, transformers\n","Successfully installed huggingface-hub-0.17.3 safetensors-0.4.0 tokenizers-0.14.1 transformers-4.34.0\n"]}]},{"cell_type":"code","source":["# Load the data\n","data = pd.read_excel('/content/Classifier_data.xlsx')  # Replace 'your_data.csv' with the path to your data file\n"],"metadata":{"id":"j_xKb-VqQSdG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Select the first 20 rows\n","selected_rows = data.head(20)\n","\n","# Copy each selected row 20 times\n","copied_dataset = [row for _, row in selected_rows.iterrows() for _ in range(30)]\n","\n","# Create a new DataFrame from the copied data\n","new_df = pd.DataFrame(copied_dataset)"],"metadata":{"id":"g7uT3AgTRHS1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"VLzN7jB9Styg","executionInfo":{"status":"ok","timestamp":1696852871028,"user_tz":-330,"elapsed":436,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"d2de645f-40a0-4111-9b9a-726b8d5ee7ef"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Investment_type BusinessLoanType CheckingAccountType OnlineBankingHistory  \\\n","0       Investment          Nothing             Nothing              Nothing   \n","0       Investment          Nothing             Nothing              Nothing   \n","0       Investment          Nothing             Nothing              Nothing   \n","0       Investment          Nothing             Nothing              Nothing   \n","0       Investment          Nothing             Nothing              Nothing   \n","..             ...              ...                 ...                  ...   \n","18         Nothing        Term Loan             Nothing              Nothing   \n","18         Nothing        Term Loan             Nothing              Nothing   \n","18         Nothing        Term Loan             Nothing              Nothing   \n","18         Nothing        Term Loan             Nothing              Nothing   \n","18         Nothing        Term Loan             Nothing              Nothing   \n","\n","            Classifier  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","..                 ...  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","\n","[570 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-a0ded04e-f833-43fd-8803-a7eef5672d9f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Investment_type</th>\n","      <th>BusinessLoanType</th>\n","      <th>CheckingAccountType</th>\n","      <th>OnlineBankingHistory</th>\n","      <th>Classifier</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>570 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0ded04e-f833-43fd-8803-a7eef5672d9f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a0ded04e-f833-43fd-8803-a7eef5672d9f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a0ded04e-f833-43fd-8803-a7eef5672d9f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4e644d6a-31ff-47e5-9e24-6db4e943652b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e644d6a-31ff-47e5-9e24-6db4e943652b')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4e644d6a-31ff-47e5-9e24-6db4e943652b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Split the data into training and testing sets\n","X = data.drop('Classifier', axis=1)\n","y = data['Classifier']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"2UZg2Rz-SyuE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load pre-trained BERT tokenizer and model\n","tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n","model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(y.unique()))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":232,"referenced_widgets":["200acbec9e5e4007ad66694457b59199","437fc4908b6a43439caed6229242b78a","e6dd976924ac4d0285802bf1c94317dc","fbd4c2b3331e4aa18a06802993f29cd3","52594215d6e6456db2d334cd81070868","7eca2f2a4ca94549980359c14646dc62","3f2e0371bfab48f386d053389e5f7e1c","238ea7e0151348868f222ca1f230f416","a6e0e1ff8d5744ed840eccd410f09c5b","371891b2492147e492a8e7f6dbadbe95","4240553a119344ae9fff494345164e98","5ea998c143434040905b8e69672a45b8","5c0a1b3f8e244cdf8099d97bba66b229","63937e6362714b4a9133c62f4a97d15a","3af6014312de42f699715a77c6a2aa67","982a5bdf828f42628c107c46b18dbc15","71b831d18c014c81be9d4bcb7281ea81","05cebf4c052f41abb9088d34301e4909","6484143eb6664e97ae2bcfb2fa5dcfec","be558f5a544945f995f0b4f889212b1e","a6259e73b1cb42beb852f5f4b456dc73","88365230b1104a65a840007be00f9975","b570261d73564a1bbe4438f742932dd3","e770f02826d84bba84653f1b5e410bd6","f2f026ab79304940a097bbdd8769e602","1bca37394a1f4affaf51c5d3dab3d4c6","4b2fbe03a2d24950897cc024560ecf00","728160df986f4f51b930b23dfd36369a","4d4a5850f4864b5fb83950797200b062","bae55382125942a7a1b106139214a94b","e2ee6a38d57c41bab260ec7fb810c8f3","f31fa6ed6c5d45a6b88d30b7724c55db","b676950a32764825a052dcf7b1f64824","00daea108c784c7389991d0b3f4fe4ec","8bb8145e6755469f85580a9fc4430230","11075cbff7d9412c9b99d9eb11618560","4bab92e675524078bb5c4fa0a1fc7175","821c457abf8c44bab511efa4bd3c6b49","8f90f4574dce426d9b5553d8e67c5f4c","be564cc5a59b406a91283c5ab51a79e2","f5b187d9461149cb80908ac5269f0caa","7de1bea24f004f28bf39768787f43f12","2a18ab4a3f1f43ffb82e3f100e994978","d23629a703de43a3be85419f513f76af","064e0ab183d64044b9016d4251308ddd","5d14545339504478832a3e6b29b44309","13f43a11f92841908ec16b05192891be","a8f66bda9a3145c6bfe8776175ac4492","4111170b28d84abfa21fc0aeb1d7ba1c","34d7ccb3656245edbe03cadee5bb421e","a80d19a7de80412e8049bb8b46365f25","3c414cabf2c34484bc2ffc5e5fbdebdd","fefb4c0cf1a343779ef521ab0375c3c5","2a99acc6a6644d278117cc7ce8a522e4","0fad9e9af61e4880ac1811561ccd05c2"]},"id":"9UR2bBfPUHIk","executionInfo":{"status":"ok","timestamp":1696852922793,"user_tz":-330,"elapsed":10097,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"bd620bb7-b9a9-4e06-f311-ceab2746847e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading (…)okenizer_config.json:   0%|          | 0.00/28.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"200acbec9e5e4007ad66694457b59199"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)solve/main/vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5ea998c143434040905b8e69672a45b8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)/main/tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b570261d73564a1bbe4438f742932dd3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)lve/main/config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"00daea108c784c7389991d0b3f4fe4ec"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"064e0ab183d64044b9016d4251308ddd"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.weight', 'classifier.bias']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]}]},{"cell_type":"code","source":["# Tokenize and encode the input text data\n","def tokenize_text(texts, tokenizer, max_length):\n","    input_ids = []\n","    attention_masks = []\n","\n","    for text in texts:\n","        encoding = tokenizer(text, truncation=True, padding='max_length', max_length=max_length, return_tensors='pt')\n","        input_ids.append(encoding['input_ids'])\n","        attention_masks.append(encoding['attention_mask'])\n","\n","    return torch.cat(input_ids, dim=0), torch.cat(attention_masks, dim=0)\n"],"metadata":{"id":"w92DXvoaUKdX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","\n","# Initialize the label encoder\n","label_encoder = LabelEncoder()\n","\n","# Fit and transform the label encoder on the training data\n","y_train_encoded = label_encoder.fit_transform(y_train)\n","\n","# Transform the test data using the same label encoder\n","y_test_encoded = label_encoder.transform(y_test)\n"],"metadata":{"id":"Txo-S6hoUzr4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tokenize the text data\n","max_text_length = 32\n","train_input_ids, train_attention_masks = tokenize_text(X_train['Investment_type'], tokenizer, max_text_length)\n","test_input_ids, test_attention_masks = tokenize_text(X_test['Investment_type'], tokenizer, max_text_length)\n","\n","# Create DataLoader for training and testing\n","batch_size = 32\n","train_data = TensorDataset(train_input_ids, train_attention_masks, torch.tensor(y_train_encoded))\n","train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n","test_data = TensorDataset(test_input_ids, test_attention_masks, torch.tensor(y_test_encoded))\n","test_loader = DataLoader(test_data, batch_size=batch_size)\n","\n","\n","# Define the optimizer and learning rate scheduler\n","optimizer = AdamW(model.parameters(), lr=2e-5, eps=1e-8)\n","scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=len(train_loader) * 2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vLrYH9E5USeo","executionInfo":{"status":"ok","timestamp":1696853101325,"user_tz":-330,"elapsed":418,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"a9dfb4a9-6f2b-408e-c38f-0293029d0224"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/transformers/optimization.py:411: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Training loop\n","num_epochs = 2\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model.to(device)\n","\n","for epoch in range(num_epochs):\n","    model.train()\n","    total_loss = 0\n","\n","    for batch in train_loader:\n","        batch = tuple(t.to(device) for t in batch)\n","        input_ids, attention_mask, labels = batch\n","\n","        optimizer.zero_grad()\n","        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)\n","        loss = outputs.loss\n","        total_loss += loss.item()\n","        loss.backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n","        optimizer.step()\n","        scheduler.step()\n","\n","    average_train_loss = total_loss / len(train_loader)\n","    print(f\"Epoch {epoch+1} - Average training loss: {average_train_loss}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gx1183wFUW9o","executionInfo":{"status":"ok","timestamp":1696853153605,"user_tz":-330,"elapsed":24584,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"5049e973-b594-42ab-828f-ff26bfb41115"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1 - Average training loss: 1.0974164009094238\n","Epoch 2 - Average training loss: 1.086804986000061\n"]}]},{"cell_type":"code","source":["# Evaluation\n","model.eval()\n","eval_loss, eval_accuracy = 0, 0\n","predictions, true_labels = [], []\n","\n","for batch in test_loader:\n","    batch = tuple(t.to(device) for t in batch)\n","    input_ids, attention_mask, labels = batch\n","\n","    with torch.no_grad():\n","        outputs = model(input_ids, attention_mask=attention_mask)\n","\n","    logits = outputs.logits\n","    predictions.extend(torch.argmax(logits, dim=1).tolist())\n","    true_labels.extend(labels.tolist())"],"metadata":{"id":"J8FrxymGU_S_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["unique_classes = y.unique()\n","print(unique_classes)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OjbIWRV1V4uG","executionInfo":{"status":"ok","timestamp":1696853366264,"user_tz":-330,"elapsed":410,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"d701a45d-a972-4525-e6a5-8ef0c99d52e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Investment_Banking' 'Commercial_Banking' 'Retail_Banking']\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","\n","# Convert all 'Classifier' values to strings\n","data['Classifier'] = data['Classifier'].astype(str)\n","\n","# Initialize the label encoder\n","label_encoder = LabelEncoder()\n","\n","# Fit and transform the label encoder on the 'Classifier' data\n","data['Classifier_encoded'] = label_encoder.fit_transform(data['Classifier'])\n"],"metadata":{"id":"5eKXqkBeWIKi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["report = classification_report(y_test_encoded, predictions, labels=data['Classifier_encoded'].unique())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x6cwsPRWWJmG","executionInfo":{"status":"ok","timestamp":1696853439393,"user_tz":-330,"elapsed":443,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"652854aa-ab2a-4135-9e91-1483b254987b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Calculate the confusion matrix\n","cm = confusion_matrix(y_test_encoded, predictions)\n","\n","# Create a heatmap for the confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=data['Classifier'].unique(), yticklabels=data['Classifier'].unique())\n","plt.xlabel('Predicted')\n","plt.ylabel('True')\n","plt.title('Confusion Matrix')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":572},"id":"E4tPYgqwV-hS","executionInfo":{"status":"ok","timestamp":1696853479989,"user_tz":-330,"elapsed":1271,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"efb9e086-624a-4586-c261-8f94d86a7d07"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","import torch.nn.functional as F\n","\n","# Get predicted logits\n","logits = model(test_input_ids, test_attention_masks).logits\n","\n","# Apply softmax to get probabilities\n","probs = F.softmax(logits, dim=1)\n","\n","# Get predicted probabilities for the positive class (class 1)\n","y_scores = probs[:, 1].cpu().detach().numpy()\n","\n","# Calculate the ROC curve\n","fpr, tpr, thresholds = roc_curve(y_test_encoded, y_scores)\n","\n","# Calculate AUC\n","roc_auc = auc(fpr, tpr)\n","\n","# Plot the ROC curve\n","plt.figure(figsize=(8, 6))\n","plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n","plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC)')\n","plt.legend(loc='lower right')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"C8OnGTLSVH5R","executionInfo":{"status":"ok","timestamp":1696853525940,"user_tz":-330,"elapsed":1902,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"4aa5b0fa-eafd-4abc-8db5-8c6daf527bd2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, classification_report\n"],"metadata":{"id":"uUwylt5sVLYY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = pd.read_excel('/content/Classifier_data.xlsx')\n","\n"],"metadata":{"id":"CgLkbg9u7EnO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Select the first 20 rows\n","selected_rows = data.head(20)\n","\n","# Copy each selected row 20 times\n","copied_dataset = [row for _, row in selected_rows.iterrows() for _ in range(30)]\n","\n","# Create a new DataFrame from the copied data\n","new_df = pd.DataFrame(copied_dataset)"],"metadata":{"id":"J5iebG6B7MkV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data=new_df"],"metadata":{"id":"hr_T1NgM7UlG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"NWEU71nv7Wjd","executionInfo":{"status":"ok","timestamp":1697450657309,"user_tz":-330,"elapsed":10,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"9f7a171b-d455-408a-a476-7ce5e9efbe77"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Investment_type                             Parties Involved (M&A)  \\\n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","..             ...                                                ...   \n","18         Nothing                                            Nothing   \n","18         Nothing                                            Nothing   \n","18         Nothing                                            Nothing   \n","18         Nothing                                            Nothing   \n","18         Nothing                                            Nothing   \n","\n","   BusinessLoanType CheckingAccountType OnlineBankingHistory  \\\n","0           Nothing             Nothing              Nothing   \n","0           Nothing             Nothing              Nothing   \n","0           Nothing             Nothing              Nothing   \n","0           Nothing             Nothing              Nothing   \n","0           Nothing             Nothing              Nothing   \n","..              ...                 ...                  ...   \n","18        Term Loan             Nothing              Nothing   \n","18        Term Loan             Nothing              Nothing   \n","18        Term Loan             Nothing              Nothing   \n","18        Term Loan             Nothing              Nothing   \n","18        Term Loan             Nothing              Nothing   \n","\n","            Classifier  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","0   Investment_Banking  \n","..                 ...  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","18  Commercial_Banking  \n","\n","[570 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-cf13e3e1-edd6-41ab-aa34-a35e2ebad2ed\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Investment_type</th>\n","      <th>Parties Involved (M&amp;A)</th>\n","      <th>BusinessLoanType</th>\n","      <th>CheckingAccountType</th>\n","      <th>OnlineBankingHistory</th>\n","      <th>Classifier</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Term Loan</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Commercial_Banking</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>570 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf13e3e1-edd6-41ab-aa34-a35e2ebad2ed')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cf13e3e1-edd6-41ab-aa34-a35e2ebad2ed button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cf13e3e1-edd6-41ab-aa34-a35e2ebad2ed');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bbe97952-71cf-4524-85e2-cb4de773e6d5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bbe97952-71cf-4524-85e2-cb4de773e6d5')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bbe97952-71cf-4524-85e2-cb4de773e6d5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(data[['Investment_type', 'Parties Involved (M&A)', 'BusinessLoanType', 'CheckingAccountType', 'OnlineBankingHistory']].apply(lambda x: ' '.join(x), axis=1))\n","y = data['Classifier']\n"],"metadata":{"id":"NPp4GgPB7XQG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"KboIGdg07nET"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf_classifier.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":76},"id":"xCmgUQVX8gEH","executionInfo":{"status":"ok","timestamp":1697450695806,"user_tz":-330,"elapsed":380,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"feeaaadc-1d8f-4b03-ebe7-52fd9da24f2a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["y_pred = rf_classifier.predict(X_test)\n","\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f'Accuracy: {accuracy:.2f}')\n","\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e8W5sKFs8hds","executionInfo":{"status":"ok","timestamp":1697450702821,"user_tz":-330,"elapsed":391,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"89b341f6-c2b2-4b44-ee23-78bf804d3663"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 1.00\n","                    precision    recall  f1-score   support\n","\n","Commercial_Banking       1.00      1.00      1.00        46\n","Investment_Banking       1.00      1.00      1.00        33\n","    Retail_Banking       1.00      1.00      1.00        35\n","\n","          accuracy                           1.00       114\n","         macro avg       1.00      1.00      1.00       114\n","      weighted avg       1.00      1.00      1.00       114\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Calculate the confusion matrix\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","\n","# Create a DataFrame to display the confusion matrix\n","confusion_df = pd.DataFrame(conf_matrix, columns=rf_classifier.classes_, index=rf_classifier.classes_)\n","\n","# Display the confusion matrix as a heatmap\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(confusion_df, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"i98fUNTa8jPe","executionInfo":{"status":"ok","timestamp":1697450761479,"user_tz":-330,"elapsed":515,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"7b453461-fa8f-4f76-cc25-f3def6e64395"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.preprocessing import label_binarize\n","from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Binarize the labels for the multiclass problem\n","y_bin = label_binarize(y_test, classes=rf_classifier.classes_)\n","\n","# Get predicted probabilities for each class\n","y_probs = rf_classifier.predict_proba(X_test)\n","\n","# Initialize variables to store fpr, tpr, and roc_auc for each class\n","fpr = dict()\n","tpr = dict()\n","roc_auc = dict()\n","\n","# Calculate ROC curve and ROC AUC for each class\n","for i in range(len(rf_classifier.classes_)):\n","    fpr[i], tpr[i], _ = roc_curve(y_bin[:, i], y_probs[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","# Plot the ROC curve for each class\n","plt.figure(figsize=(10, 8))\n","for i in range(len(rf_classifier.classes_)):\n","    plt.plot(fpr[i], tpr[i], lw=2, label=f'ROC curve (AUC = {roc_auc[i]:.2f}) for class {rf_classifier.classes_[i]}')\n","\n","plt.plot([0, 1], [0, 1], 'k--', lw=2)\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Multiclass ROC AUC Curve')\n","plt.legend(loc='lower right')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":718},"id":"enXfBrak8ra4","executionInfo":{"status":"ok","timestamp":1697450894941,"user_tz":-330,"elapsed":992,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"60987850-cfa4-483a-9570-c3fc9560e28d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data = pd.read_excel('/content/Classifier_data copy.xlsx')"],"metadata":{"id":"V8DMUU9i9C_v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Select the first 20 rows\n","selected_rows = data.head(60)\n","\n","# Copy each selected row 20 times\n","copied_dataset = [row for _, row in selected_rows.iterrows() for _ in range(30)]\n","\n","# Create a new DataFrame from the copied data\n","new_df = pd.DataFrame(copied_dataset)"],"metadata":{"id":"PksoR8gDC1fM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data=new_df"],"metadata":{"id":"dxIebZBkC-YH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"dofynvneDHRR","executionInfo":{"status":"ok","timestamp":1697453007283,"user_tz":-330,"elapsed":10,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"fe402954-a9f7-4b39-a4d8-72f9bdeb0681"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Investment_type                             Parties Involved (M&A)  \\\n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","0       Investment  mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...   \n","..             ...                                                ...   \n","59      Investment  uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...   \n","59      Investment  uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...   \n","59      Investment  uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...   \n","59      Investment  uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...   \n","59      Investment  uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...   \n","\n","   BusinessLoanType BusinessCurrencyType CheckingAccountType  \\\n","0           Nothing              Nothing             Nothing   \n","0           Nothing              Nothing             Nothing   \n","0           Nothing              Nothing             Nothing   \n","0           Nothing              Nothing             Nothing   \n","0           Nothing              Nothing             Nothing   \n","..              ...                  ...                 ...   \n","59          Nothing              Nothing             Nothing   \n","59          Nothing              Nothing             Nothing   \n","59          Nothing              Nothing             Nothing   \n","59          Nothing              Nothing             Nothing   \n","59          Nothing              Nothing             Nothing   \n","\n","   OnlineBankingHistory          Classifier  \n","0               Nothing  Investment_Banking  \n","0               Nothing  Investment_Banking  \n","0               Nothing  Investment_Banking  \n","0               Nothing  Investment_Banking  \n","0               Nothing  Investment_Banking  \n","..                  ...                 ...  \n","59              Nothing  Investment_Banking  \n","59              Nothing  Investment_Banking  \n","59              Nothing  Investment_Banking  \n","59              Nothing  Investment_Banking  \n","59              Nothing  Investment_Banking  \n","\n","[1800 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-5ff079f5-6121-46cb-975e-53ee9783b08d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Investment_type</th>\n","      <th>Parties Involved (M&amp;A)</th>\n","      <th>BusinessLoanType</th>\n","      <th>BusinessCurrencyType</th>\n","      <th>CheckingAccountType</th>\n","      <th>OnlineBankingHistory</th>\n","      <th>Classifier</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Investment</td>\n","      <td>mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>Investment</td>\n","      <td>uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>Investment</td>\n","      <td>uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>Investment</td>\n","      <td>uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>Investment</td>\n","      <td>uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>Investment</td>\n","      <td>uGU03jMGXyxZqXaM3fBOqdgIevl6skPoiwCtOWnf048seE...</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Nothing</td>\n","      <td>Investment_Banking</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1800 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ff079f5-6121-46cb-975e-53ee9783b08d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5ff079f5-6121-46cb-975e-53ee9783b08d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5ff079f5-6121-46cb-975e-53ee9783b08d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c8247624-7d72-4c5b-93e7-335d9169137e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8247624-7d72-4c5b-93e7-335d9169137e')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c8247624-7d72-4c5b-93e7-335d9169137e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["# Vectorize the text data using CountVectorizer\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(data[['Investment_type', 'Parties Involved (M&A)', 'BusinessLoanType', 'BusinessCurrencyType', 'CheckingAccountType', 'OnlineBankingHistory']].astype(str).apply(lambda x: ' '.join(x), axis=1))\n","y = data['Classifier']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create and train a Random Forest classifier\n","rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf_classifier.fit(X_train, y_train)\n","\n","# Make predictions and evaluate the model\n","y_pred = rf_classifier.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","print(f'Accuracy: {accuracy:.2f}')\n","print(classification_report(y_test, y_pred))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1dinlo7zDIF8","executionInfo":{"status":"ok","timestamp":1697453676833,"user_tz":-330,"elapsed":748,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"402ec9bd-4606-4a91-b555-5c15ae859711"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.86\n","                    precision    recall  f1-score   support\n","\n","Commercial Banking       0.64      0.70      0.67        73\n","Commercial_Banking       0.72      0.67      0.69        87\n","Investment_Banking       1.00      1.00      1.00        98\n","    Retail_Banking       1.00      1.00      1.00       102\n","\n","          accuracy                           0.86       360\n","         macro avg       0.84      0.84      0.84       360\n","      weighted avg       0.86      0.86      0.86       360\n","\n"]}]},{"cell_type":"code","source":["print(data.columns)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3VdGPO3JHUTw","executionInfo":{"status":"ok","timestamp":1697453532092,"user_tz":-330,"elapsed":468,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"bb291996-1788-4f3b-9307-e532e003ad9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Investment_type', 'Parties Involved (M&A)', 'BusinessLoanType',\n","       'BusinessCurrencyType', 'CheckingAccountType', 'OnlineBankingHistory',\n","       'Classifier'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Calculate the confusion matrix\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","\n","# Create a DataFrame to display the confusion matrix\n","confusion_df = pd.DataFrame(conf_matrix, columns=rf_classifier.classes_, index=rf_classifier.classes_)\n","\n","# Display the confusion matrix as a heatmap\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(confusion_df, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"jJKZXLSADUNx","executionInfo":{"status":"ok","timestamp":1697453689771,"user_tz":-330,"elapsed":670,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"42fb1782-41b5-4e3d-f4cd-4de0ba834403"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.preprocessing import label_binarize\n","from sklearn.metrics import roc_curve, auc\n","import matplotlib.pyplot as plt\n","\n","# Binarize the labels for the multiclass problem\n","y_bin = label_binarize(y_test, classes=rf_classifier.classes_)\n","\n","# Get predicted probabilities for each class\n","y_probs = rf_classifier.predict_proba(X_test)\n","\n","# Initialize variables to store fpr, tpr, and roc_auc for each class\n","fpr = dict()\n","tpr = dict()\n","roc_auc = dict()\n","\n","# Calculate ROC curve and ROC AUC for each class\n","for i in range(len(rf_classifier.classes_)):\n","    fpr[i], tpr[i], _ = roc_curve(y_bin[:, i], y_probs[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","# Plot the ROC curve for each class\n","plt.figure(figsize=(10, 8))\n","for i in range(len(rf_classifier.classes_)):\n","    plt.plot(fpr[i], tpr[i], lw=2, label=f'ROC curve (AUC = {roc_auc[i]:.2f}) for class {rf_classifier.classes_[i]}')\n","\n","plt.plot([0, 1], [0, 1], 'k--', lw=2)\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Multiclass ROC AUC Curve')\n","plt.legend(loc='lower right')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":718},"id":"SSkGNfn1FEeZ","executionInfo":{"status":"ok","timestamp":1697453934200,"user_tz":-330,"elapsed":1633,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"fc25494a-92a2-41e9-800f-ec8a1610f07f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","# Load the data\n","data = pd.DataFrame({\n","    'Investment_type': ['Investment', 'Nothing', 'Nothing', 'Investment', 'Nothing', 'Nothing', 'Nothing', 'Investment', 'Nothing', 'Nothing', 'Investment', 'Nothing', 'Nothing', 'Nothing'],\n","    'Parties Involved (M&A)': ['mbP5G1ptFzE3fhLBL1GGgoQB3VxOYQUnm6Xeb7gmAgnd71S11x', 'Nothing', 'Nothing', 'iBkeWNQO9SxMxfPADrS7BbrZY3EALnHrxr5tDeTikDWJphhntv', 'Nothing', 'Nothing', 'Nothing', 'oJWK6Im4gLbXmtcYMb2R7bSjXwR4vDBfZPd7JX4rR2QlgxDayt', 'Nothing', 'Nothing', 'BtwcnvUfDXrLodUrdKuhXxiqk22GfFs7tCuYvtWRFgVeZfi6wF', 'Nothing', 'Nothing', 'Nothing'],\n","    'BusinessLoanType': ['Nothing', 'Commercial Mortgage', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing', 'Nothing'],\n","    'BusinessCurrencyType': ['Nothing', 'USD', 'Nothing', 'Nothing', 'GBP', 'GBP', 'Nothing', 'Nothing', 'GBP', 'Nothing', 'Nothing', 'GBP', 'USD', 'Nothing'],\n","    'CheckingAccountType': ['Nothing', 'Nothing', 'Joint', 'Nothing', 'Nothing', 'Nothing', 'Individual', 'Nothing', 'Nothing', 'Joint', 'Nothing', 'Nothing', 'Nothing', 'Individual'],\n","    'OnlineBankingHistory': ['Nothing', 'Nothing', 'Regular', 'Nothing', 'Nothing', 'Nothing', 'Rare', 'Nothing', 'Nothing', 'Regular', 'Nothing', 'Nothing', 'Nothing', 'Rare'],\n","    'Classifier': ['Investment_Banking', 'Commercial_Banking', 'Retail_Banking', 'Investment_Banking', 'Commercial_Banking', 'Commercial_Banking', 'Retail_Banking', 'Investment_Banking', 'Commercial_Banking', 'Retail_Banking', 'Investment_Banking', 'Commercial_Banking', 'Commercial_Banking', 'Retail_Banking']\n","})\n","\n","# Vectorize the text data using CountVectorizer\n","vectorizer = CountVectorizer()\n","X = vectorizer.fit_transform(data[['Investment_type', 'Parties Involved (M&A)', 'BusinessLoanType', 'BusinessCurrencyType', 'CheckingAccountType', 'OnlineBankingHistory']].astype(str).apply(lambda x: ' '.join(x), axis=1))\n","y = data['Classifier']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create and train a Random Forest classifier\n","rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf_classifier.fit(X_train, y_train)\n","\n","# Make predictions and evaluate the model\n","y_pred = rf_classifier.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","print(f'Accuracy: {accuracy:.2f}')\n","print(classification_report(y_test, y_pred))\n"],"metadata":{"id":"hYhcP0vEI3sa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698571140670,"user_tz":-330,"elapsed":2994,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"e36008e4-5a28-4a30-aed2-126da3dda575"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 1.00\n","                    precision    recall  f1-score   support\n","\n","Commercial_Banking       1.00      1.00      1.00         1\n","Investment_Banking       1.00      1.00      1.00         1\n","    Retail_Banking       1.00      1.00      1.00         1\n","\n","          accuracy                           1.00         3\n","         macro avg       1.00      1.00      1.00         3\n","      weighted avg       1.00      1.00      1.00         3\n","\n"]}]},{"cell_type":"code","source":["pip install transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JkLoatb_xfo-","executionInfo":{"status":"ok","timestamp":1698854497466,"user_tz":-330,"elapsed":15858,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"afb2e2c5-48fd-401e-ba8d-4ef7f41ed241"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting transformers\n","  Downloading transformers-4.34.1-py3-none-any.whl (7.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.7/7.7 MB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.12.4)\n","Collecting huggingface-hub<1.0,>=0.16.4 (from transformers)\n","  Downloading huggingface_hub-0.18.0-py3-none-any.whl (301 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m302.0/302.0 kB\u001b[0m \u001b[31m32.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.23.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (23.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2023.6.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)\n","Collecting tokenizers<0.15,>=0.14 (from transformers)\n","  Downloading tokenizers-0.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.8/3.8 MB\u001b[0m \u001b[31m55.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting safetensors>=0.3.1 (from transformers)\n","  Downloading safetensors-0.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m52.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.1)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->transformers) (2023.6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->transformers) (4.5.0)\n","Collecting huggingface-hub<1.0,>=0.16.4 (from transformers)\n","  Downloading huggingface_hub-0.17.3-py3-none-any.whl (295 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m295.0/295.0 kB\u001b[0m \u001b[31m25.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2023.7.22)\n","Installing collected packages: safetensors, huggingface-hub, tokenizers, transformers\n","Successfully installed huggingface-hub-0.17.3 safetensors-0.4.0 tokenizers-0.14.1 transformers-4.34.1\n"]}]},{"cell_type":"code","source":["from transformers import BertTokenizer\n"],"metadata":{"id":"HJZXFJ9S2syj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Initialize the BERT tokenizer\n","tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n"],"metadata":{"id":"z5TSMudn2xi1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define the percentage of data to use for training\n","train_percentage = 0.8\n","\n","# Calculate the number of rows for training\n","num_rows = data.shape[0]\n","num_train = int(num_rows * train_percentage)\n","\n","# Split the data into training and testing sets\n","train_data = data.iloc[:num_train, :]\n","test_data = data.iloc[num_train:, :]"],"metadata":{"id":"4OS4-eoD3oX5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Example data\n","X_train = train_data\n","X_test = test_data\n","\n","# Tokenize the text data\n","train_inputs = tokenizer(X_train, padding=True, truncation=True, return_tensors='pt', max_length=128)\n","test_inputs = tokenizer(X_test, padding=True, truncation=True, return_tensors='pt', max_length=128)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"id":"z1Gfv70x20N4","executionInfo":{"status":"error","timestamp":1698573561308,"user_tz":-330,"elapsed":680,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"6a9f516d-ad79-4269-a905-53b2380087f8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-a4a50edab6ee>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Tokenize the text data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mtrain_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtruncation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_tensors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'pt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_length\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mtest_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtruncation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_tensors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'pt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_length\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, text, text_pair, text_target, text_pair_target, add_special_tokens, padding, truncation, max_length, stride, is_split_into_words, pad_to_multiple_of, return_tensors, return_token_type_ids, return_attention_mask, return_overflowing_tokens, return_special_tokens_mask, return_offsets_mapping, return_length, verbose, **kwargs)\u001b[0m\n\u001b[1;32m   2788\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_in_target_context_manager\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2789\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_switch_to_input_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2790\u001b[0;31m             \u001b[0mencodings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_one\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext_pair\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtext_pair\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mall_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2791\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtext_target\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2792\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_switch_to_target_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36m_call_one\u001b[0;34m(self, text, text_pair, add_special_tokens, padding, truncation, max_length, stride, is_split_into_words, pad_to_multiple_of, return_tensors, return_token_type_ids, return_attention_mask, return_overflowing_tokens, return_special_tokens_mask, return_offsets_mapping, return_length, verbose, **kwargs)\u001b[0m\n\u001b[1;32m   2846\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2847\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_is_valid_text_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2848\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m   2849\u001b[0m                 \u001b[0;34m\"text input must of type `str` (single example), `List[str]` (batch or single pretokenized example) \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2850\u001b[0m                 \u001b[0;34m\"or `List[List[str]]` (batch of pretokenized examples).\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: text input must of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples)."]}]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"TB_iBs82n8bu","executionInfo":{"status":"ok","timestamp":1698854592930,"user_tz":-330,"elapsed":10,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"92768f1b-96dc-41ff-e3d9-08cc07ae352d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             CurrencyType BusinessOverdraftLimit   BusinessCardExpiryDate  \\\n","0  BusinessMortgageAmount           CurrencyType  BusinessBeneficiaryName   \n","1  BusinessMortgageAmount           CurrencyType  BusinessBeneficiaryName   \n","2  BusinessMortgageAmount           CurrencyType  BusinessBeneficiaryName   \n","3  BusinessMortgageAmount           CurrencyType  BusinessBeneficiaryName   \n","4  BusinessMortgageAmount           CurrencyType  BusinessBeneficiaryName   \n","\n","  InterestRate Underwriting Information      AccountBalance  \\\n","0    SWIFTCode     OnlineBankingHistory  BillPaymentHistory   \n","1    SWIFTCode     OnlineBankingHistory  BillPaymentHistory   \n","2    SWIFTCode     OnlineBankingHistory  BillPaymentHistory   \n","3    SWIFTCode     OnlineBankingHistory  BillPaymentHistory   \n","4    SWIFTCode     OnlineBankingHistory  BillPaymentHistory   \n","\n","  Shares Offered (IPO)            LedgerID TransactionAmount  \\\n","0         WithdrawalID  BusinessLoanAmount        CustomerID   \n","1         WithdrawalID  BusinessLoanAmount        CustomerID   \n","2         WithdrawalID  BusinessLoanAmount        CustomerID   \n","3         WithdrawalID  BusinessLoanAmount        CustomerID   \n","4         WithdrawalID  BusinessLoanAmount        CustomerID   \n","\n","    Transaction Amount (M&A)  ...     BeneficiaryName    CommercialLoanID  \\\n","0  BusinessTransactionAmount  ...  BusinessMortgageID  Trading Account ID   \n","1  BusinessTransactionAmount  ...  BusinessMortgageID  Trading Account ID   \n","2  BusinessTransactionAmount  ...  BusinessMortgageID  Trading Account ID   \n","3  BusinessTransactionAmount  ...  BusinessMortgageID  Trading Account ID   \n","4  BusinessTransactionAmount  ...  BusinessMortgageID  Trading Account ID   \n","\n","  BusinessMortgageAmount MonthlyStatementID BusinessTransactionAmount  \\\n","0              DepositID           LedgerID           BusinessBICCode   \n","1              DepositID           LedgerID           BusinessBICCode   \n","2              DepositID           LedgerID           BusinessBICCode   \n","3              DepositID           LedgerID           BusinessBICCode   \n","4              DepositID           LedgerID           BusinessBICCode   \n","\n","  SavingsInterestRate BusinessLoanType         DepositID  \\\n","0         CreditScore   WireTransferID  CommercialLoanID   \n","1         CreditScore   WireTransferID  CommercialLoanID   \n","2         CreditScore   WireTransferID  CommercialLoanID   \n","3         CreditScore   WireTransferID  CommercialLoanID   \n","4         CreditScore   WireTransferID  CommercialLoanID   \n","\n","             CardNumber  Banking  \n","0  BusinessWithdrawalID  Banking  \n","1  BusinessWithdrawalID  Banking  \n","2  BusinessWithdrawalID  Banking  \n","3  BusinessWithdrawalID  Banking  \n","4  BusinessWithdrawalID  Banking  \n","\n","[5 rows x 65 columns]"],"text/html":["\n","  <div id=\"df-bf7e9b42-8e17-4a4f-9aca-3e9a86b2107c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CurrencyType</th>\n","      <th>BusinessOverdraftLimit</th>\n","      <th>BusinessCardExpiryDate</th>\n","      <th>InterestRate</th>\n","      <th>Underwriting Information</th>\n","      <th>AccountBalance</th>\n","      <th>Shares Offered (IPO)</th>\n","      <th>LedgerID</th>\n","      <th>TransactionAmount</th>\n","      <th>Transaction Amount (M&amp;A)</th>\n","      <th>...</th>\n","      <th>BeneficiaryName</th>\n","      <th>CommercialLoanID</th>\n","      <th>BusinessMortgageAmount</th>\n","      <th>MonthlyStatementID</th>\n","      <th>BusinessTransactionAmount</th>\n","      <th>SavingsInterestRate</th>\n","      <th>BusinessLoanType</th>\n","      <th>DepositID</th>\n","      <th>CardNumber</th>\n","      <th>Banking</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BusinessMortgageAmount</td>\n","      <td>CurrencyType</td>\n","      <td>BusinessBeneficiaryName</td>\n","      <td>SWIFTCode</td>\n","      <td>OnlineBankingHistory</td>\n","      <td>BillPaymentHistory</td>\n","      <td>WithdrawalID</td>\n","      <td>BusinessLoanAmount</td>\n","      <td>CustomerID</td>\n","      <td>BusinessTransactionAmount</td>\n","      <td>...</td>\n","      <td>BusinessMortgageID</td>\n","      <td>Trading Account ID</td>\n","      <td>DepositID</td>\n","      <td>LedgerID</td>\n","      <td>BusinessBICCode</td>\n","      <td>CreditScore</td>\n","      <td>WireTransferID</td>\n","      <td>CommercialLoanID</td>\n","      <td>BusinessWithdrawalID</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BusinessMortgageAmount</td>\n","      <td>CurrencyType</td>\n","      <td>BusinessBeneficiaryName</td>\n","      <td>SWIFTCode</td>\n","      <td>OnlineBankingHistory</td>\n","      <td>BillPaymentHistory</td>\n","      <td>WithdrawalID</td>\n","      <td>BusinessLoanAmount</td>\n","      <td>CustomerID</td>\n","      <td>BusinessTransactionAmount</td>\n","      <td>...</td>\n","      <td>BusinessMortgageID</td>\n","      <td>Trading Account ID</td>\n","      <td>DepositID</td>\n","      <td>LedgerID</td>\n","      <td>BusinessBICCode</td>\n","      <td>CreditScore</td>\n","      <td>WireTransferID</td>\n","      <td>CommercialLoanID</td>\n","      <td>BusinessWithdrawalID</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>BusinessMortgageAmount</td>\n","      <td>CurrencyType</td>\n","      <td>BusinessBeneficiaryName</td>\n","      <td>SWIFTCode</td>\n","      <td>OnlineBankingHistory</td>\n","      <td>BillPaymentHistory</td>\n","      <td>WithdrawalID</td>\n","      <td>BusinessLoanAmount</td>\n","      <td>CustomerID</td>\n","      <td>BusinessTransactionAmount</td>\n","      <td>...</td>\n","      <td>BusinessMortgageID</td>\n","      <td>Trading Account ID</td>\n","      <td>DepositID</td>\n","      <td>LedgerID</td>\n","      <td>BusinessBICCode</td>\n","      <td>CreditScore</td>\n","      <td>WireTransferID</td>\n","      <td>CommercialLoanID</td>\n","      <td>BusinessWithdrawalID</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>BusinessMortgageAmount</td>\n","      <td>CurrencyType</td>\n","      <td>BusinessBeneficiaryName</td>\n","      <td>SWIFTCode</td>\n","      <td>OnlineBankingHistory</td>\n","      <td>BillPaymentHistory</td>\n","      <td>WithdrawalID</td>\n","      <td>BusinessLoanAmount</td>\n","      <td>CustomerID</td>\n","      <td>BusinessTransactionAmount</td>\n","      <td>...</td>\n","      <td>BusinessMortgageID</td>\n","      <td>Trading Account ID</td>\n","      <td>DepositID</td>\n","      <td>LedgerID</td>\n","      <td>BusinessBICCode</td>\n","      <td>CreditScore</td>\n","      <td>WireTransferID</td>\n","      <td>CommercialLoanID</td>\n","      <td>BusinessWithdrawalID</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BusinessMortgageAmount</td>\n","      <td>CurrencyType</td>\n","      <td>BusinessBeneficiaryName</td>\n","      <td>SWIFTCode</td>\n","      <td>OnlineBankingHistory</td>\n","      <td>BillPaymentHistory</td>\n","      <td>WithdrawalID</td>\n","      <td>BusinessLoanAmount</td>\n","      <td>CustomerID</td>\n","      <td>BusinessTransactionAmount</td>\n","      <td>...</td>\n","      <td>BusinessMortgageID</td>\n","      <td>Trading Account ID</td>\n","      <td>DepositID</td>\n","      <td>LedgerID</td>\n","      <td>BusinessBICCode</td>\n","      <td>CreditScore</td>\n","      <td>WireTransferID</td>\n","      <td>CommercialLoanID</td>\n","      <td>BusinessWithdrawalID</td>\n","      <td>Banking</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 65 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf7e9b42-8e17-4a4f-9aca-3e9a86b2107c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bf7e9b42-8e17-4a4f-9aca-3e9a86b2107c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bf7e9b42-8e17-4a4f-9aca-3e9a86b2107c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c5fad1ad-8334-4d69-91aa-439987da2750\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c5fad1ad-8334-4d69-91aa-439987da2750')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c5fad1ad-8334-4d69-91aa-439987da2750 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["from transformers import BertTokenizer, BertForSequenceClassification, AdamW\n","import torch\n","import pandas as pd\n","from torch.utils.data import DataLoader, TensorDataset\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","# Load the dataset and preprocess it\n","data=pd.read_csv(\"/content/output4.csv\")\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(data[['F0', 'F1', 'F2']], data['Classifier'], test_size=0.2, random_state=42)\n","\n","# Initialize the BERT tokenizer and model\n","tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n","model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(data['Classifier'].unique()))\n","\n","# Tokenize the text data\n","train_inputs = tokenizer(X_train.values.tolist(), padding=True, truncation=True, return_tensors='pt', max_length=128)\n","test_inputs = tokenizer(X_test.values.tolist(), padding=True, truncation=True, return_tensors='pt', max_length=128)\n","\n","# Convert labels to tensors\n","train_labels = torch.tensor(y_train.values.tolist())\n","test_labels = torch.tensor(y_test.values.tolist())\n","\n","# Create DataLoader\n","train_data = TensorDataset(train_inputs.input_ids, train_inputs.attention_mask, train_inputs.token_type_ids, train_labels)\n","test_data = TensorDataset(test_inputs.input_ids, test_inputs.attention_mask, test_inputs.token_type_ids, test_labels)\n","\n","batch_size = 32\n","train_dataloader = DataLoader(train_data, batch_size=batch_size)\n","test_dataloader = DataLoader(test_data, batch_size=batch_size)\n","\n","# Set up optimizer\n","optimizer = AdamW(model.parameters(), lr=2e-5)\n","\n","# Training loop\n","epochs = 3\n","for epoch in range(epochs):\n","    model.train()\n","    for batch in train_dataloader:\n","        input_ids, attention_mask, token_type_ids, labels = batch\n","        outputs = model(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, labels=labels)\n","        loss = outputs.loss\n","        loss.backward()\n","        optimizer.step()\n","        optimizer.zero_grad()\n","\n","# Evaluation\n","model.eval()\n","predictions = []\n","with torch.no_grad():\n","    for batch in test_dataloader:\n","        input_ids, attention_mask, token_type_ids, labels = batch\n","        outputs = model(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)\n","        logits = outputs.logits\n","        predicted_labels = torch.argmax(logits, dim=1)\n","        predictions.extend(predicted_labels.tolist())\n","\n","# Calculate metrics\n","accuracy = accuracy_score(y_test, predictions)\n","report = classification_report(y_test, predictions)\n","\n","print(f'Accuracy: {accuracy:.2f}')\n","print(report)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":392},"id":"zezjDCC7uowe","executionInfo":{"status":"error","timestamp":1698854572828,"user_tz":-330,"elapsed":1168,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"f664a270-db96-4201-bf10-91a5192f8f3e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-317b0ba105c9>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Split the data into training and testing sets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'F0'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'F1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'F2'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Classifier'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Initialize the BERT tokenizer and model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3811\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3812\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3813\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3814\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3815\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6068\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6069\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6070\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6071\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6072\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6128\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6129\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6130\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6132\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['F0', 'F1', 'F2'], dtype='object')] are in the [columns]\""]}]},{"cell_type":"code","source":["data.info()"],"metadata":{"id":"8kQ7TpgUxcb1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698573164208,"user_tz":-330,"elapsed":599,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"b01b3403-f8c2-4c3b-c3b5-1488bbd67cf9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 82 entries, 0 to 81\n","Data columns (total 4 columns):\n"," #   Column      Non-Null Count  Dtype \n","---  ------      --------------  ----- \n"," 0   F0          82 non-null     object\n"," 1   F1          82 non-null     object\n"," 2   F2          82 non-null     object\n"," 3   Classifier  82 non-null     object\n","dtypes: object(4)\n","memory usage: 2.7+ KB\n"]}]},{"cell_type":"code","source":["print(data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S7sp1vGQyHVO","executionInfo":{"status":"ok","timestamp":1698573169378,"user_tz":-330,"elapsed":389,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"43414b0b-93b0-4887-d4c7-280c6d705f7a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(82, 4)\n"]}]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"9km8uYFMyWlB","executionInfo":{"status":"ok","timestamp":1698573173568,"user_tz":-330,"elapsed":641,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"8a740738-5b95-4f6e-f2b6-3c08b5e06abf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                F0                         F1  \\\n","0             Offering Price (IPO)       Offering Price (IPO)   \n","1             Shares Offered (IPO)   Prospectus Details (IPO)   \n","2         Transaction Amount (M&A)   Transaction Amount (M&A)   \n","3           Parties Involved (M&A)   Underwriting Information   \n","4          Equity Research Reports    Equity Research Reports   \n","..                             ...                        ...   \n","77             User Search Queries      User Clickstream Data   \n","78       Website/App User Behavior         Website Visitor ID   \n","79                 Conversion Rate    Abandoned Cart Tracking   \n","80  Website Traffic Source Details        User Click Heatmaps   \n","81        Cart Abandonment Reasons               Heatmap Data   \n","\n","                           F2          Classifier  \n","0        Shares Offered (IPO)             Banking  \n","1    Prospectus Details (IPO)             Banking  \n","2      Parties Involved (M&A)             Banking  \n","3    Underwriting Information             Banking  \n","4                  Investment             Banking  \n","..                        ...                 ...  \n","77   User Registration Method  Retail & Ecommerce  \n","78                 Page Views  Retail & Ecommerce  \n","79   Click-Through Rate (CTR)  Retail & Ecommerce  \n","80         Website Load Times  Retail & Ecommerce  \n","81      User Demographic Data  Retail & Ecommerce  \n","\n","[82 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-1adaf7aa-1d7f-4331-b08c-7c5b4012fbf9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>F0</th>\n","      <th>F1</th>\n","      <th>F2</th>\n","      <th>Classifier</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Offering Price (IPO)</td>\n","      <td>Offering Price (IPO)</td>\n","      <td>Shares Offered (IPO)</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Shares Offered (IPO)</td>\n","      <td>Prospectus Details (IPO)</td>\n","      <td>Prospectus Details (IPO)</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Transaction Amount (M&amp;A)</td>\n","      <td>Transaction Amount (M&amp;A)</td>\n","      <td>Parties Involved (M&amp;A)</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Parties Involved (M&amp;A)</td>\n","      <td>Underwriting Information</td>\n","      <td>Underwriting Information</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Equity Research Reports</td>\n","      <td>Equity Research Reports</td>\n","      <td>Investment</td>\n","      <td>Banking</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>User Search Queries</td>\n","      <td>User Clickstream Data</td>\n","      <td>User Registration Method</td>\n","      <td>Retail &amp; Ecommerce</td>\n","    </tr>\n","    <tr>\n","      <th>78</th>\n","      <td>Website/App User Behavior</td>\n","      <td>Website Visitor ID</td>\n","      <td>Page Views</td>\n","      <td>Retail &amp; Ecommerce</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>Conversion Rate</td>\n","      <td>Abandoned Cart Tracking</td>\n","      <td>Click-Through Rate (CTR)</td>\n","      <td>Retail &amp; Ecommerce</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>Website Traffic Source Details</td>\n","      <td>User Click Heatmaps</td>\n","      <td>Website Load Times</td>\n","      <td>Retail &amp; Ecommerce</td>\n","    </tr>\n","    <tr>\n","      <th>81</th>\n","      <td>Cart Abandonment Reasons</td>\n","      <td>Heatmap Data</td>\n","      <td>User Demographic Data</td>\n","      <td>Retail &amp; Ecommerce</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>82 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1adaf7aa-1d7f-4331-b08c-7c5b4012fbf9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1adaf7aa-1d7f-4331-b08c-7c5b4012fbf9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1adaf7aa-1d7f-4331-b08c-7c5b4012fbf9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-722b1281-3ceb-410b-8c68-3ddb8ceaafd3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-722b1281-3ceb-410b-8c68-3ddb8ceaafd3')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-722b1281-3ceb-410b-8c68-3ddb8ceaafd3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["import pandas as pd\n","import random\n","\n","# Your initial data\n","data = pd.DataFrame({'Text': [\"Offering Price (IPO) Shares Offered (IPO) Prospectus Details (IPO) Transaction Amount (M&A) Parties Involved (M&A) Underwriting Information Equity Research Reports Investment Trading Account ID BusinessAccountNumber BusinessSWIFTCode BusinessCreditScore BusinessTransactionID BusinessTransactionAmount CommercialLoanID BusinessDepositID BusinessWithdrawalID BusinessOverdraftLimit BusinessInterestRate BusinessLoanAmount BusinessLoanType BusinessMortgageID BusinessMortgageAmount BusinessCustomerID BusinessLedgerID BusinessCurrencyType BusinessCheckNumber BusinessBICCode BusinessCardNumber BusinessCardExpiryDate BusinessCardCVV BusinessCardType BusinessBeneficiaryName AccountNumber SWIFTCode BranchCode AccountBalance CreditScore TransactionID TransactionAmount DepositID WithdrawalID OverdraftLimit InterestRate SavingsInterestRate MinimumBalance ATMUsageHistory OnlineBankingHistory BillPaymentHistory MonthlyStatementID CheckingAccountType CurrencyType CheckNumber BICCode CardNumber CardExpiryDate CardCVV CardType BeneficiaryName WireTransferID LoanStatus SavingAccountID CustomerID LedgerID\"]})\n","\n","# Split the text into words and convert to a list\n","words = data['Text'].str.split().tolist()\n","\n","# Define the number of rows you want\n","num_rows = 20\n","\n","# Create a list to store the generated data\n","generated_data = []\n","\n","# Generate 20 rows with unique random orderings\n","for _ in range(num_rows):\n","    # Shuffle the words to ensure no repetitions in the row\n","    shuffled_words = random.sample(words, len(words))\n","\n","    # Append the shuffled words to the generated data\n","    generated_data.append(shuffled_words)\n","\n","# Create a DataFrame with the generated data\n","generated_df = pd.DataFrame(generated_data, columns=range(1, len(words) + 1))\n","\n","# Save the generated data to a CSV file\n","generated_df.to_csv('generated_data.csv', index=False)\n"],"metadata":{"id":"olT8-DWLyaEN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(generated_df.head(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q3Em9XQQBPjU","executionInfo":{"status":"ok","timestamp":1698576195441,"user_tz":-330,"elapsed":414,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"77f7e758-4155-46b4-e795-aff442c797a2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                                   1\n","0  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","1  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","2  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","3  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","4  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","5  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","6  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","7  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","8  [Offering, Price, (IPO), Shares, Offered, (IPO...\n","9  [Offering, Price, (IPO), Shares, Offered, (IPO...\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","\n","# Provide the file path\n","files.download('generated_data.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"4sMIUv3uASxZ","executionInfo":{"status":"ok","timestamp":1698575935408,"user_tz":-330,"elapsed":407,"user":{"displayName":"Krantik Das","userId":"05758048419163048828"}},"outputId":"5433666f-ac1b-45e4-9fc3-4aacb4636271"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_b8a216e7-4e4d-4470-93fa-3d6d5f899ede\", \"generated_data.csv\", 26822)"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"z_n50EKNAkeR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"uIGJZzTYEkLy"},"execution_count":null,"outputs":[]}]}